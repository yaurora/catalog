image:
  repository: ghcr.io/truecharts/postgresql
  pullPolicy: IfNotPresent
  tag: v14.2.0@sha256:07311431e0245f6fe235cdbd8947a3c20b024b4fa2a414e0915e28e5da8e5661

controller:
  # -- Set the controller type.
  # Valid options are deployment, daemonset or statefulset
  type: statefulset
  # -- Number of desired pods
  replicas: 1
  # -- Set the controller upgrade strategy
  # For Deployments, valid values are Recreate (default) and RollingUpdate.
  # For StatefulSets, valid values are OnDelete and RollingUpdate (default).
  # DaemonSets ignore this.
  strategy: RollingUpdate
  rollingUpdate:
    # -- Set deployment RollingUpdate max unavailable
    unavailable: 1
    # -- Set deployment RollingUpdate max surge
    surge:
    # -- Set statefulset RollingUpdate partition
    partition:
  # -- ReplicaSet revision history limit
  revisionHistoryLimit: 3

securityContext:
  readOnlyRootFilesystem: false

service:
  main:
    ports:
      main:
        port: 5432
        targetPort: 5432

## TODO: Fix the backup-on-upgrade system
enableUpgradeBackup: false

podSecurityContext:
  runAsGroup: 0

volumeClaimTemplates:
  db:
    enabled: true
    mountPath: "/bitnami/postgresql"

# -- Probe configuration
# -- [[ref]](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
# @default -- See below
probes:
  # -- Liveness probe configuration
  # @default -- See below
  liveness:
    # -- Enable the liveness probe
    enabled: true
    # -- Set this to `true` if you wish to specify your own livenessProbe
    custom: true
    # -- The spec field contains the values for the default livenessProbe.
    # If you selected `custom: true`, this field holds the definition of the livenessProbe.
    # @default -- See below
    spec:
      exec:
        command:
          - sh
          - -c
          - "until pg_isready -U ${POSTGRES_USER} -h localhost; do sleep 2 ; done"

  # -- Redainess probe configuration
  # @default -- See below
  readiness:
    # -- Enable the readiness probe
    enabled: true
    # -- Set this to `true` if you wish to specify your own readinessProbe
    custom: true
    # -- The spec field contains the values for the default readinessProbe.
    # If you selected `custom: true`, this field holds the definition of the readinessProbe.
    # @default -- See below
    spec:
      exec:
        command:
          - sh
          - -c
          - "until pg_isready -U ${POSTGRES_USER} -h localhost; do sleep 2 ; done"
  # -- Startup probe configuration
  # @default -- See below
  startup:
    # -- Enable the startup probe
    enabled: true
    custom: true
    # -- The spec field contains the values for the default livenessProbe.
    # If you selected `custom: true`, this field holds the definition of the livenessProbe.
    # @default -- See below
    spec:
      exec:
        command:
          - sh
          - -c
          - "until pg_isready -U ${POSTGRES_USER} -h localhost; do sleep 2 ; done"

postgresqlPassword: "testpass"
postgresqlUsername: "test"
postgresqlDatabase: "test"
postgrespassword: "testroot"
existingSecret: ""

envValueFrom:
  POSTGRES_PASSWORD:
    secretKeyRef:
      name: '{{ ( tpl .Values.existingSecret $ ) | default ( include "common.names.fullname" . ) }}'
      key: "postgresql-password"
  POSTGRESQL_POSTGRES_PASSWORD:
    secretKeyRef:
      name: '{{ ( tpl .Values.existingSecret $ ) | default ( include "common.names.fullname" . ) }}'
      key: "postgresql-postgres-password"

envTpl:
  POSTGRES_USER: "{{ .Values.postgresqlUsername }}"
  POSTGRES_DB: "{{ .Values.postgresqlDatabase }}"
# POSTGRESQL_POSTGRES_PASSWORD: "{{ .Values.postgrespassword }}"
# POSTGRESQL_PASSWORD: "{{ .Values.password }}"
